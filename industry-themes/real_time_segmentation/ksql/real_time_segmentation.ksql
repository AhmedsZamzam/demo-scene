SET 'auto.offset.reset'='earliest';

------------------------------
-- Add Stream Metadata to Topics
------------------------------

CREATE STREAM CUSTOMER_ACTIVITY_STREAM
(
    ACTIVITY_ID INTEGER,
    CUSTOMER_ID STRING,
    ACTIVITY_TYPE STRING,
    PRODUCT_ID STRING, 
    CHECKOUT_AMOUNT DOUBLE
)
WITH (
    KAFKA_TOPIC = 'CUSTOMER_ACTIVITY_STREAM',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM CUSTOMERS_STREAM
(
    CUSTOMER_ID STRING,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    TOTAL_SPEND DOUBLE,
    SPEND_SEGMENT STRING
)
WITH (
    KAFKA_TOPIC = 'CUSTOMERS_STREAM',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM PRODUCTS_STREAM
(
    PRODUCT_ID STRING,
    PRODUCT_DESCRIPTION STRING
)
WITH (
    KAFKA_TOPIC = 'PRODUCTS_STREAM',
    VALUE_FORMAT = 'JSON'
);

-----------------------------------------------
-- Format events to Avro and partition by key
-----------------------------------------------

CREATE STREAM CUSTOMER_ACTIVITY_STREAM_KEY
WITH (
    KAFKA_TOPIC = 'CUSTOMER_ACTIVITY_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    ACTIVITY_ID,
    CUSTOMER_ID,
    ACTIVITY_TYPE,
    PRODUCT_ID,
    CHECKOUT_AMOUNT
FROM CUSTOMER_ACTIVITY_STREAM
PARTITION BY CUSTOMER_ID;

CREATE STREAM CUSTOMERS_STREAM_KEY
WITH (
    KAFKA_TOPIC = 'CUSTOMERS_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
) AS 
SELECT 
    CUSTOMER_ID,
    FIRST_NAME,
    LAST_NAME,
    EMAIL,
    TOTAL_SPEND,
    SPEND_SEGMENT
FROM CUSTOMERS_STREAM
PARTITION BY CUSTOMER_ID;

CREATE STREAM PRODUCTS_STREAM_KEY
WITH (
    KAFKA_TOPIC = 'PRODUCTS_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    PRODUCT_ID,
    PRODUCT_DESCRIPTION
FROM PRODUCTS_STREAM
PARTITION BY PRODUCT_ID;

--------------------------------------------
-- Build Customers table from keyed stream
--------------------------------------------

CREATE TABLE CUSTOMERS_TABLE
(
    CUSTOMER_ID STRING,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    TOTAL_SPEND DOUBLE,
    SPEND_SEGMENT STRING
)
WITH (
    KAFKA_TOPIC = 'CUSTOMERS_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
);

CREATE TABLE CUSTOMERS_TABLE_LOOKUP_SET
AS 
SELECT 
    CUSTOMER_ID,
    COLLECT_SET(FIRST_NAME) AS FN_SET,
    COLLECT_SET(LAST_NAME) AS LN_SET,
    COLLECT_SET(EMAIL) AS EMAIL_SET,
    COLLECT_SET(TOTAL_SPEND) AS TOTAL_SPEND_SET,
    COLLECT_SET(SPEND_SEGMENT) AS SPEND_SEGMENT_SET
FROM CUSTOMERS_STREAM_KEY
GROUP BY CUSTOMER_ID;

CREATE TABLE CUSTOMERS_TABLE_LOOKUP_LATEST
AS 
SELECT 
    CUSTOMER_ID,
    LATEST_BY_OFFSET(FIRST_NAME) AS FN_LATEST,
    LATEST_BY_OFFSET(LAST_NAME) AS LN_LATEST,
    LATEST_BY_OFFSET(EMAIL) AS EMAIL_LATEST,
    LATEST_BY_OFFSET(TOTAL_SPEND) AS TOTAL_SPEND_LATEST,
    LATEST_BY_OFFSET(SPEND_SEGMENT) AS SPEND_SEGMENT_LATEST
FROM CUSTOMERS_STREAM_KEY
GROUP BY CUSTOMER_ID;

---------------------------------------------------------------------
-- Join customer activity stream and customer table on customer_id
---------------------------------------------------------------------

CREATE STREAM SEGMENTED_CUSTOMER_ACTIVITY_STREAM
WITH (
    KAFKA_TOPIC = 'SEGMENTED_CUSTOMER_ACTIVITY_STREAM',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    cas.ACTIVITY_ID,
    cas.CUSTOMER_ID,
    cas.ACTIVITY_TYPE,
    cas.PRODUCT_ID,
    cas.CHECKOUT_AMOUNT,
    ct.FIRST_NAME,
    ct.LAST_NAME,
    ct.EMAIL,
    ct.TOTAL_SPEND,
    ct.SPEND_SEGMENT
FROM CUSTOMER_ACTIVITY_STREAM_KEY cas 
LEFT OUTER JOIN CUSTOMERS_TABLE ct 
ON cas.CUSTOMER_ID = ct.ROWKEY;

----------------------------------------------
-- Build stream of checkout events
----------------------------------------------

CREATE STREAM CUSTOMER_UPDATES
WITH (
    KAFKA_TOPIC = 'CUSTOMER_UPDATES',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CAS_CUSTOMER_ID,
    FIRST_NAME,
    LAST_NAME,
    EMAIL,
    TOTAL_SPEND AS OLD_TOTAL_SPEND,
    CHECKOUT_AMOUNT,
    ROUND(TOTAL_SPEND + CHECKOUT_AMOUNT, 2) AS TOTAL_SPEND,
    SPEND_SEGMENT AS OLD_SPEND_SEGMENT,
    CASE
        WHEN TOTAL_SPEND + CHECKOUT_AMOUNT <= 100 THEN 'low'
        WHEN TOTAL_SPEND + CHECKOUT_AMOUNT > 100 AND TOTAL_SPEND + CHECKOUT_AMOUNT < 1000 THEN 'medium'
        ELSE 'high'
    END AS SPEND_SEGMENT
FROM SEGMENTED_CUSTOMER_ACTIVITY_STREAM;

----------------------------------------------------------------------------
-- Produce the updated total spend and segment back to the customers stream    
----------------------------------------------------------------------------

INSERT INTO CUSTOMERS_STREAM_KEY
SELECT
    CAS_CUSTOMER_ID AS CUSTOMER_ID,
    FIRST_NAME,
    LAST_NAME,
    EMAIL,
    TOTAL_SPEND,
    SPEND_SEGMENT
FROM CUSTOMER_UPDATES
EMIT CHANGES;

-- Example queries
-- SELECT * FROM CUSTOMER_ACTIVITY_STREAM_KEY EMIT CHANGES;
-- SELECT * FROM SEGMENTED_CUSTOMER_ACTIVITY_STREAM EMIT CHANGES;
-- SELECT * FROM CUSTOMER_UPDATES WHERE OLD_SPEND_SEGMENT != SPEND_SEGMENT EMIT CHANGES;
-- SELECT * FROM CUSTOMERS_TABLE_LOOKUP_LATEST WHERE rowkey = '';
-- SELECT * FROM CUSTOMERS_TABLE_LOOKUP_SET WHERE rowkey = '';
