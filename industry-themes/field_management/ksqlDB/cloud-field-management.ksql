--Confluent Cloud ksqlDB
SET 'auto.offset.reset'='earliest';

CREATE STREAM UTILITY_TRUCK_LOCATION
(
    TRUCK_ID INT,
    TRUCK_LAT STRING,
    TRUCK_LONG STRING,
    CREW_ID INT,
    UPDATE_FLAG STRING
)
WITH (
    KAFKA_TOPIC = 'UTILITY_TRUCK_LOCATION',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM UTILITY_WORK_ORDERS
(
    WORK_ORDER_ID INT,
    SITE_ID INT,
    ASSIGNED_CREW INT,
    STATUS STRING,
    COMMENT STRING
)
WITH (
    KAFKA_TOPIC = 'UTILITY_WORK_ORDERS',
    VALUE_FORMAT = 'JSON'
);

--Repartition and convert to Avro
--filter truck location where update_flag = true
CREATE STREAM UTILITY_TRUCK_LOCATION_KEY
WITH (
    KAFKA_TOPIC = 'UTILITY_TRUCK_LOCATION_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    TRUCK_ID,
    TRUCK_LAT,
    TRUCK_LONG,
    CREW_ID
FROM UTILITY_TRUCK_LOCATION
WHERE UPDATE_FLAG = 'true'
PARTITION BY CREW_ID;

CREATE STREAM UTILITY_WORK_ORDERS_KEY
WITH (
    KAFKA_TOPIC = 'UTILITY_WORK_ORDERS_KEY',
    VALUE_FORMAT = 'AVRO'
) AS 
SELECT
    WORK_ORDER_ID,
    SITE_ID,
    ASSIGNED_CREW,
    STATUS,
    COMMENT
FROM UTILITY_WORK_ORDERS
PARTITION BY ASSIGNED_CREW;

--Create truck location table from keyed topic
CREATE TABLE UTILITY_TRUCK_LOCATION_TABLE
(
    TRUCK_ID INT,
    TRUCK_LAT STRING,
    TRUCK_LONG STRING,
    CREW_ID INT PRIMARY KEY
)
WITH (
    KAFKA_TOPIC = 'UTILITY_TRUCK_LOCATION_KEY',
    VALUE_FORMAT = 'AVRO'
);

--Stream to Table Join - Trucks and Work Orders
CREATE STREAM UTILITY_WORK_ORDERS_TRUCK_JOINED
WITH (
    KAFKA_TOPIC = 'UTILITY_WORK_ORDERS_TRUCK_JOINED',
    VALUE_FORMAT = 'JSON'
) AS 
SELECT
    WORK_ORDER_ID,
    SITE_ID,
    ASSIGNED_CREW,
    STATUS,
    COMMENT,
    CREW_ID,
    TRUCK_ID,
    TRUCK_LAT,
    TRUCK_LONG
FROM UTILITY_WORK_ORDERS_KEY
LEFT OUTER JOIN UTILITY_TRUCK_LOCATION_TABLE
ON ASSIGNED_CREW = CREW_ID;