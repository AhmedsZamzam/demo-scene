SET 'auto.offset.reset'='earliest';

-----------------------------------------
-- Build page views based on product and search pages
-----------------------------------------
CREATE STREAM CUSTOMER_PAGE_VIEWS
(
    ACTIVITY_ID INTEGER,
    CUSTOMER_ID STRING,
    PAGE_TYPE STRING,
    PRODUCT_ID STRING,
    SEARCH_TEXT STRING
)
WITH (
    KAFKA_TOPIC = 'CUSTOMER_PAGE_VIEWS',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM CUSTOMER_PRODUCT_VIEWS_KEYED
WITH (
    KAFKA_TOPIC = 'CUSTOMER_PRODUCT_VIEWS_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CUSTOMER_ID,
    PAGE_TYPE,
    PRODUCT_ID
FROM CUSTOMER_PAGE_VIEWS
WHERE PAGE_TYPE = 'product'
PARTITION BY PRODUCT_ID;

CREATE STREAM CUSTOMER_SEARCH_VIEWS_KEYED
WITH (
    KAFKA_TOPIC = 'CUSTOMER_SEARCH_VIEWS_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CUSTOMER_ID,
    PAGE_TYPE,
    PRODUCT_ID,
    SEARCH_TEXT
FROM CUSTOMER_PAGE_VIEWS
WHERE PAGE_TYPE = 'search'
PARTITION BY SEARCH_TEXT;

----------------------------------------------
-- Build the products table
----------------------------------------------

CREATE STREAM PRODUCTS_PPE
(
    PRODUCT_ID STRING,
    PRODUCT_NAME STRING,
    MAX_DISCOUNT DOUBLE
)
WITH (
    KAFKA_TOPIC = 'PRODUCTS_PPE',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM PRODUCTS_PPE_KEYED
WITH (
    KAFKA_TOPIC = 'PRODUCTS_PPE_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    PRODUCT_ID,
    PRODUCT_NAME,
    MAX_DISCOUNT
FROM PRODUCTS_PPE
PARTITION BY PRODUCT_ID;

CREATE TABLE PRODUCTS_PPE_TABLE
(
    PRODUCT_ID STRING,
    PRODUCT_NAME STRING,
    MAX_DISCOUNT DOUBLE
)
WITH (
    KAFKA_TOPIC = 'PRODUCTS_PPE_KEYED',
    VALUE_FORMAT = 'AVRO',
    KEY = 'PRODUCT_ID'
);

--------------------------------------------------------
-- Build the contract price table with a compound key
--------------------------------------------------------

CREATE STREAM CONTRACT_PRICE
(
    CONTRACT_ID INTEGER,
    CUSTOMER_ID STRING,
    PRODUCT_ID STRING,
    CONTRACT_UNIT_PRICE DOUBLE
)
WITH (
    KAFKA_TOPIC = 'CONTRACT_PRICE',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM CONTRACT_PRICE_KEYED
WITH (
    KAFKA_TOPIC = 'CONTRACT_PRICE_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CONTRACT_ID,
    CUSTOMER_ID,
    PRODUCT_ID,
    CUSTOMER_ID + '--' + PRODUCT_ID AS PRODUCT_CUSTOMER_ID,
    CONTRACT_UNIT_PRICE
FROM CONTRACT_PRICE
PARTITION BY PRODUCT_CUSTOMER_ID;

CREATE TABLE CONTRACT_PRICE_TABLE
(
    CONTRACT_ID INTEGER,
    CUSTOMER_ID STRING,
    PRODUCT_ID STRING,
    PRODUCT_CUSTOMER_ID STRING,
    CONTRACT_UNIT_PRICE DOUBLE
)
WITH (
    KAFKA_TOPIC = 'CONTRACT_PRICE_KEYED',
    VALUE_FORMAT = 'AVRO',
    KEY = 'PRODUCT_CUSTOMER_ID'
);

------------------------------------------------
-- Joins to get max discount and contract price
-------------------------------------------------
CREATE STREAM CUSTOMER_PRODUCT_DISCOUNT
WITH (
    KAFKA_TOPIC = 'CUSTOMER_PRODUCT_DISCOUNT',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CUSTOMER_ID,
    c.PRODUCT_ID,
    CUSTOMER_ID + '--' + c.PRODUCT_ID AS PRODUCT_CUSTOMER_ID,
    PRODUCT_NAME,
    MAX_DISCOUNT
FROM CUSTOMER_PRODUCT_VIEWS_KEYED c
LEFT OUTER JOIN PRODUCTS_PPE_TABLE p
ON c.PRODUCT_ID = p.PRODUCT_ID
PARTITION BY PRODUCT_CUSTOMER_ID;

CREATE STREAM CUSTOMER_PRODUCT_PRICE
WITH (
    KAFKA_TOPIC = 'CUSTOMER_PRODUCT_PRICE',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    cup.CUSTOMER_ID,
    C_PRODUCT_ID,
    PRODUCT_NAME,
    MAX_DISCOUNT,
    CONTRACT_UNIT_PRICE
FROM CUSTOMER_PRODUCT_DISCOUNT cup
LEFT OUTER JOIN CONTRACT_PRICE_TABLE cpt
ON cup.PRODUCT_CUSTOMER_ID = cpt.PRODUCT_CUSTOMER_ID;


-------------------------------------------
-- Alert table
-------------------------------------------
CREATE TABLE CUSTOMER_PRODUCT_ALERTS
WITH (
    KAFKA_TOPIC = 'CUSTOMER_PRODUCT_ALERTS',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CUP_CUSTOMER_ID,
    C_PRODUCT_ID,
    PRODUCT_NAME,
    CONTRACT_UNIT_PRICE,
    MAX_DISCOUNT,
    ROUND(CONTRACT_UNIT_PRICE * (1.00 - MAX_DISCOUNT), 2) AS UNIT_NET_PRICE,
    ROUND(CONTRACT_UNIT_PRICE - (CONTRACT_UNIT_PRICE * (1.00 - MAX_DISCOUNT)), 2) AS UNIT_DISCOUNT_AMOUNT,
    COUNT(*) AS VIEW_COUNT
FROM CUSTOMER_PRODUCT_PRICE
WINDOW HOPPING(SIZE 30 SECONDS, ADVANCE BY 10 SECONDS)
GROUP BY CUP_CUSTOMER_ID, C_PRODUCT_ID, PRODUCT_NAME, CONTRACT_UNIT_PRICE, MAX_DISCOUNT
HAVING COUNT(*) > 3;