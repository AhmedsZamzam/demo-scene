SET 'auto.offset.reset'='earliest';

CREATE STREAM TRUCK_ENGINE_SENSORS
(
    TRUCK_ID STRING,
    ENGINE_TEMPERATURE INTEGER,
    AVERAGE_RPM INTEGER
)
WITH (
    KAFKA_TOPIC = 'TRUCK_ENGINE_SENSORS',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM TRUCK_ENGINE_SENSORS_KEYED
WITH (
    KAFKA_TOPIC = 'TRUCK_ENGINE_SENSORS_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    ROWTIME AS EVENT_TIME,
    TRUCK_ID,
    ENGINE_TEMPERATURE,
    AVERAGE_RPM
FROM TRUCK_ENGINE_SENSORS
WHERE TRUCK_ID NOT LIKE 'truck_id'
PARTITION BY TRUCK_ID;

CREATE STREAM TRUCK_LOCATION
(
    TRUCK_ID STRING,
    TRUCK_LAT STRING,
    TRUCK_LONG STRING
)
WITH (
    KAFKA_TOPIC = 'TRUCK_LOCATION',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM TRUCK_LOCATION_KEYED
WITH (
    KAFKA_TOPIC = 'TRUCK_LOCATION_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    ROWTIME AS EVENT_TIME,
    TRUCK_ID,
    TRUCK_LAT,
    TRUCK_LONG
FROM TRUCK_LOCATION
PARTITION BY TRUCK_ID;

CREATE STREAM TRUCK_EVENTS_JOINED
WITH (
    KAFKA_TOPIC = 'TRUCK_EVENTS_JOINED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    tl.EVENT_TIME AS LOCATION_EVENT_TIME,
    tl.TRUCK_ID AS TRUCK_ID_LOC,
    tl.TRUCK_LAT,
    tl.TRUCK_LONG,
    te.TRUCK_ID AS TRUCK_ID_ENG,
    te.EVENT_TIME AS ENGINE_EVENT_TIME,
    te.ENGINE_TEMPERATURE,
    te.AVERAGE_RPM,
    CASE
        WHEN ENGINE_TEMPERATURE > 200 AND AVERAGE_RPM > 2000 THEN 1
        ELSE 0
    END AS HIGH_TEMP
FROM TRUCK_LOCATION_KEYED tl
LEFT OUTER JOIN TRUCK_ENGINE_SENSORS_KEYED te
WITHIN 10 SECONDS
ON tl.TRUCK_ID = te.TRUCK_ID;

CREATE TABLE TRUCK_ALERTS
WITH (
    KAFKA_TOPIC = 'TRUCK_ALERTS',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    TRUCK_ID_LOC,
    COLLECT_SET('{' + TRUCK_LAT + ',' + TRUCK_LONG + '}') AS TRUCK_LAT_LONG_ARRAY,
    MAX(ENGINE_TEMPERATURE) AS MAX_ENG_TEMP,
    MAX(AVERAGE_RPM) AS MAX_AVG_RPM,
    COUNT(*)
FROM TRUCK_EVENTS_JOINED
WINDOW TUMBLING (SIZE 4 SECONDS)
WHERE HIGH_TEMP = 1
GROUP BY TRUCK_ID_LOC
HAVING COUNT(*) > 20;
