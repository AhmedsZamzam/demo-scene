SET 'auto.offset.reset'='earliest';

--client_currency_updates
--{"client_id":58,"currency":"DKK","quantity":2769.71}
CREATE STREAM CLIENT_CURRENCY_UPDATES 
(
    CLIENT_ID STRING,
    CURRENCY STRING,
    QUANTITY DOUBLE
)
WITH (
    KAFKA_TOPIC = 'CLIENT_CURRENCY_UPDATES',
    VALUE_FORMAT = 'JSON'
);

--currency_pairs_updates
--{"currency_pair":"USD/NOK","pair_rate":1.27503}
CREATE STREAM CURRENCY_PAIRS_UPDATES 
(
    CURRENCY_PAIR STRING,
    PAIR_RATE DOUBLE
)
WITH (
    KAFKA_TOPIC = 'CURRENCY_PAIRS_UPDATES',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM CLIENT_CURRENCY_UPDATES_KEY
WITH (
    KAFKA_TOPIC = 'CLIENT_CURRENCY_UPDATES_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
CLIENT_ID,
CURRENCY,
QUANTITY
FROM CLIENT_CURRENCY_UPDATES
PARTITION BY CURRENCY;

CREATE STREAM CURRENCY_PAIRS_UPDATES_KEY
WITH (
    KAFKA_TOPIC = 'CURRENCY_PAIRS_UPDATES_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
CURRENCY_PAIR,
PAIR_RATE
FROM CURRENCY_PAIRS_UPDATES
PARTITION BY CURRENCY_PAIR;

--CREATE TABLE CURRENCY_PAIRS_WINDOW_TABLE
--WITH (
--    KAFKA_TOPIC = 'CURRENCY_PAIRS_WINDOW_TABLE',
--    VALUE_FORMAT = 'AVRO'
--) AS
--SELECT
--CURRENCY_PAIR,
--LATEST_BY_OFFSET(PAIR_RATE) AS LATEST_PAIR_RATE,
--MIN(PAIR_RATE) AS MIN_PAIR_RATE,
--MAX(PAIR_RATE) AS MAX_PAIR_RATE,
--COLLECT_LIST(PAIR_RATE) AS PAIR_RATE_LIST
--FROM CURRENCY_PAIRS_UPDATES_KEY
--WINDOW HOPPING(SIZE 60 SECONDS, ADVANCE BY 10 SECONDS)
--GROUP BY CURRENCY_PAIR
--HAVING COUNT(*) > 2
--EMIT CHANGES;

--SELECT
--CURRENCY_PAIR,
--(MAX_PAIR_RATE - MIN_PAIR_RATE)/MIN_PAIR_RATE AS RATE_CHANGE
--FROM CURRENCY_PAIRS_WINDOW_TABLE
--EMIT CHANGES;

CREATE TABLE CURRENCY_PAIRS_RATE_TABLE
WITH (
    KAFKA_TOPIC = 'CURRENCY_PAIRS_RATE_TABLE',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
CURRENCY_PAIR,
LATEST_BY_OFFSET(PAIR_RATE) AS LATEST_PAIR_RATE
FROM CURRENCY_PAIRS_UPDATES_KEY
GROUP BY CURRENCY_PAIR;

CREATE STREAM CURRENCY_PAIRS_RATE_CHANGE
WITH (
    KAFKA_TOPIC = 'CURRENCY_PAIRS_RATE_CHANGE',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
s.CURRENCY_PAIR,
SPLIT(s.CURRENCY_PAIR, '/')[1] AS BASE,
SPLIT(s.CURRENCY_PAIR, '/')[2] AS QUOTE,
s.PAIR_RATE AS CURRENT_PAIR_RATE,
t.LATEST_PAIR_RATE AS LAST_PAIR_RATE,
CASE 
    WHEN t.LATEST_PAIR_RATE IS NULL THEN CAST(0 AS DOUBLE)
    ELSE (s.PAIR_RATE - t.LATEST_PAIR_RATE)/t.LATEST_PAIR_RATE
END AS RATE_CHANGE
FROM CURRENCY_PAIRS_UPDATES_KEY s
LEFT OUTER JOIN CURRENCY_PAIRS_RATE_TABLE t
ON s.CURRENCY_PAIR = t.CURRENCY_PAIR;

CREATE STREAM CURRENCY_PAIRS_BASE_ALERTS
WITH (
    KAFKA_TOPIC = 'CURRENCY_PAIRS_BASE_ALERTS',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
S_CURRENCY_PAIR,
BASE,
QUOTE,
CURRENT_PAIR_RATE,
LAST_PAIR_RATE,
RATE_CHANGE
FROM CURRENCY_PAIRS_RATE_CHANGE
WHERE ABS(RATE_CHANGE) > .3
PARTITION BY BASE;

CREATE STREAM CURRENCY_PAIRS_QUOTE_ALERTS
WITH (
    KAFKA_TOPIC = 'CURRENCY_PAIRS_QUOTE_ALERTS',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
S_CURRENCY_PAIR,
BASE,
QUOTE,
CURRENT_PAIR_RATE,
LAST_PAIR_RATE,
RATE_CHANGE
FROM CURRENCY_PAIRS_RATE_CHANGE
WHERE ABS(RATE_CHANGE) > .3
PARTITION BY QUOTE;

CREATE TABLE CLIENT_CURRENCY_TABLE
WITH (
    KAFKA_TOPIC = 'CLIENT_CURRENCY_TABLE',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
CURRENCY AS CLIENT_CURRENCY,
COLLECT_SET(CLIENT_ID) AS CLIENT_ID_SET,
ROUND(SUM(QUANTITY), 2) AS TOTAL_EXPOSURE
FROM CLIENT_CURRENCY_UPDATES_KEY
GROUP BY CURRENCY;

CREATE STREAM FX_BASE_CLIENT_ALERTS
WITH (
    KAFKA_TOPIC = 'FX_BASE_CLIENT_ALERTS',
    VALUE_FORMAT = 'AVRO'
)
AS 
SELECT
*
FROM CURRENCY_PAIRS_BASE_ALERTS a
LEFT OUTER JOIN CLIENT_CURRENCY_TABLE t
ON a.BASE = t.CLIENT_CURRENCY
EMIT CHANGES;