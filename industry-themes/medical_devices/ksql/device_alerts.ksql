SET 'auto.offset.reset'='earliest';

CREATE STREAM MEDICAL_DEVICES_STREAM
(
    DEVICE_ID STRING,
    DEVICE_TYPE  STRING,
    HOSPITAL STRING,
    STATE STRING,
    CITY STRING,
    COUNTRY STRING
)
WITH (
    KAFKA_TOPIC = 'MEDICAL_DEVICES_STREAM',
    VALUE_FORMAT = 'JSON',
    KEY = 'DEVICE_ID'
);

CREATE STREAM MEDICAL_DEVICES_KEYED
WITH (
    KAFKA_TOPIC = 'MEDICAL_DEVICES_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CAST (DEVICE_ID AS STRING) AS DEVICE_ID_STR,
    DEVICE_TYPE,
    HOSPITAL,
    STATE,
    CITY,
    COUNTRY
FROM MEDICAL_DEVICES_STREAM
PARTITION BY DEVICE_ID_STR;

CREATE TABLE MEDICAL_DEVICES_TABLE
(
    DEVICE_ID_STR STRING,
    DEVICE_TYPE STRING,
    HOSPITAL STRING,
    STATE STRING,
    CITY STRING,
    COUNTRY STRING
)
WITH (
    KAFKA_TOPIC = 'MEDICAL_DEVICES_KEYED',
    VALUE_FORMAT = 'AVRO',
    KEY = 'DEVICE_ID_STR'
);

CREATE STREAM DEVICE_SENSORS
(
    DEVICE_ID STRING,
    PHYSICIAN_ID INTEGER,
    TEMPERATURE DOUBLE,
    PRESSURE DOUBLE
)
WITH (
    KAFKA_TOPIC = 'DEVICE_SENSORS',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM DEVICE_SENSORS_KEYED
WITH (
    KAFKA_TOPIC = 'DEVICE_SENSORS_KEYED',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    ROWTIME AS EVENT_TIME,
    CAST (DEVICE_ID AS STRING) AS DEVICE_ID_STR,
    PHYSICIAN_ID,
    TEMPERATURE,
    PRESSURE
FROM DEVICE_SENSORS
PARTITION BY DEVICE_ID_STR;

CREATE STREAM DEVICE_EVENTS_HEALTH
WITH (
    KAFKA_TOPIC = 'DEVICE_EVENTS_HEALTH',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    ds.DEVICE_ID_STR AS DEVICE_ID_STR,
    ds.EVENT_TIME AS SENSOR_EVENT_TIME,
    ds.TEMPERATURE,
    ds.PRESSURE,
    mdt.DEVICE_TYPE,
    mdt.HOSPITAL,
    mdt.COUNTRY,
    mdt.STATE,
    mdt.CITY,
    CASE
        WHEN TEMPERATURE > 25 AND PRESSURE > 140 THEN 'High Temp and Pressure'
        WHEN TEMPERATURE > 25 THEN 'High Temp'
        WHEN PRESSURE > 140 THEN 'High Pressure'
        ELSE 'Healthy'
    END AS HEALTH
FROM DEVICE_SENSORS_KEYED ds
LEFT OUTER JOIN MEDICAL_DEVICES_TABLE mdt
ON ds.DEVICE_ID_STR = mdt.DEVICE_ID_STR;

CREATE TABLE DEVICE_ALERTS
WITH (
    KAFKA_TOPIC = 'DEVICE_ALERTS',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    DEVICE_ID_STR,
    HEALTH,
    DEVICE_TYPE,
    HOSPITAL,
    MAX(TEMPERATURE) AS MAX_TEMP,
    MAX(PRESSURE) AS MAX_PRESSURE,
    COUNT(*) AS ALERT_COUNT
FROM DEVICE_EVENTS_HEALTH
WINDOW TUMBLING (SIZE 5 SECONDS)
WHERE HEALTH <> 'Healthy'
GROUP BY DEVICE_ID_STR, HEALTH, DEVICE_TYPE, HOSPITAL
HAVING COUNT(*) > 1;
