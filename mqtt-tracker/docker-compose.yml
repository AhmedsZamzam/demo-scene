---
version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENTPLATFORM_VERSION}
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-enterprise-kafka:${CONFLUENTPLATFORM_VERSION}
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines: 
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup. 
    # If the latter is true, you will need to change the value 'localhost' in 
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those 
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENTPLATFORM_VERSION}
    ports:
      - 8081:8081
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300


  ksql-server:
    image: confluentinc/cp-ksql-server:${CONFLUENTPLATFORM_VERSION}
    container_name: ksql-server
    ports:
      - 8088:8088
    depends_on:
      - kafka
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      KSQL_CUB_KAFKA_TIMEOUT: 300
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Useful settings for development/laptop use - modify as needed for Prod
      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      KSQL_KSQL_SINK_PARTITIONS: 1
      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
    volumes:
      - ./data:/data

  ksql-cli:
    image: confluentinc/cp-ksql-cli:${CONFLUENTPLATFORM_VERSION}
    container_name: ksql-cli
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true
    volumes:
      - ./data:/data

  kafka-connect-01:
    image: confluentinc/cp-kafka-connect:${CONFLUENTPLATFORM_VERSION}
    container_name: kafka-connect-01
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CUB_KAFKA_TIMEOUT: 300
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect-01'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group-01
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-group-01-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-group-01-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-group-01-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'TRACE'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      # External secrets config
      # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
      CONNECT_CONFIG_PROVIDERS: 'file'
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: 'org.apache.kafka.common.config.provider.FileConfigProvider'
    volumes:
      - ./data:/data
    command: 
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash 
      - -c 
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt confluentinc/kafka-connect-mqtt:1.2.3
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        echo "Waiting for Kafka Connect to start listening on $$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT ⏳"
        while : ; do
          curl_status=$$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors)
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
          if [ $$curl_status -eq 200 ] ; then
            break
          fi
          sleep 5 
        done
        #
        echo -e "\n--\n+> Creating Kafka Connect MQTT source"
        curl -X PUT -H  "Content-Type:application/json" http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors/source-mqtt-01/config \
          -d '{
            "connector.class" : "io.confluent.connect.mqtt.MqttSourceConnector",
            "mqtt.server.uri" : "$${file:/data/mqtt.credentials:MQTT_URL}",
            "mqtt.password" : "$${file:/data/mqtt.credentials:MQTT_PASSWORD}",
            "mqtt.username" : "$${file:/data/mqtt.credentials:MQTT_USERNAME}",
            "mqtt.topics" : "owntracks/#",
            "kafka.topic" : "data_mqtt",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "value.converter": "org.apache.kafka.connect.converters.ByteArrayConverter",
            "tasks.max" : "1",
            "confluent.topic.bootstrap.servers" : "kafka:29092",
            "confluent.topic.replication.factor" : "1"
          }'
        #
        sleep infinity

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0
    container_name: elasticsearch
    ports:
      - 9200:9200
    environment:
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    command: 
      - bash 
      - -c 
      - |
        /usr/local/bin/docker-entrypoint.sh & 
        echo "Waiting for Elasticsearch to start ⏳"
        while : ; do
          curl_status=$$(curl -s -o /dev/null -w %{http_code} http://localhost:9200/)
          echo -e $$(date) " Elasticsearch listener HTTP state: " $$curl_status " (waiting for 200)"
          if [ $$curl_status -eq 200 ] ; then
            break
          fi
          sleep 5 
        done
        echo -e "\n--\n+> Creating Elasticsearch dynamic mapping"
        curl -XPUT "http://localhost:9200/_template/kafkaconnect/?include_type_name=true" -H 'Content-Type: application/json' -d'
        {
                    "template": "*",
                    "settings": {
                        "number_of_shards": 1,
                        "number_of_replicas": 0
                    },
                    "mappings": {
                      "_default_" : {
                        "dynamic_templates": [
                            {
                                "dates": {
                                    "match": "*_TS",
                                    "mapping": {
                                        "type": "date"
                                    }
                                }
                            },
                            {
                                "heights": {
                                    "match": "HEIGHT",
                                    "mapping": {
                                        "type": "float"
                                    }
                                }
                            },
                            {
                                "locations": {
                                    "match": "LOCATION",
                                    "mapping": {
                                        "type": "geo_point"
                                    }
                                }
                            }
                        ]
                      }
                    }
                }'
        sleep infinity



  kibana:
    image: docker.elastic.co/kibana/kibana:6.7.0
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"
    command: 
      - bash 
      - -c 
      - |
        /usr/local/bin/kibana-docker & 
        #
        echo "Waiting for Kibana to start ⏳"
        while : ; do
          curl_status=$$(curl -s -o /dev/null -w %{http_code} http://localhost:5601/api/kibana/settings)
          echo -e $$(date) " Kibana listener HTTP state: " $$curl_status " (waiting for 200)"
          if [ $$curl_status -eq 200 ] ; then
            break
          fi
          sleep 5 
        done
        #
        echo "Waiting for Kibana API to be available ⏳"
        while : ; do
          kibana_status=$$(curl -s 'http://localhost:5601/api/kibana/settings')
          echo -e $$(date) " Kibana API response: " $$kibana_status
          if [ $$kibana_status != "Kibana server is not ready yet" ] ; then
            break
          fi
          sleep 5 
        done
        #
        sleep 60 
        echo -e "\n--\n+> Setup Kibana objects"

        echo -e "\n--\n+> Opt out of Kibana telemetry"
        curl 'http://localhost:5601/api/telemetry/v1/optIn' -H 'kbn-xsrf: nevergonnagiveyouup' -H 'content-type: application/json' -H 'accept: application/json' --data-binary '{"enabled":false}' --compressed

        echo -e "\n--\n+> Create Kibana index patterns"
        curl -XPOST 'http://localhost:5601/api/saved_objects/index-pattern/runner_location_idx' \
            -H 'kbn-xsrf: nevergonnagiveyouup' \
            -H 'Content-Type: application/json' \
            -d '{"attributes":{"title":"runner_location","timeFieldName":"EVENT_TS"}}'

        curl -XPOST 'http://localhost:5601/api/saved_objects/index-pattern/runner_status_idx' \
            -H 'kbn-xsrf: nevergonnagiveyouup' \
            -H 'Content-Type: application/json' \
            -d '{"attributes":{"title":"runner_status","timeFieldName":"EVENT_TS"}}'

        echo -e "\n--\n+> Set default Kibana index"
        curl -XPOST 'http://localhost:5601/api/kibana/settings' \
            -H 'kbn-xsrf: nevergonnagiveyouup' \
            -H 'content-type: application/json' \
            -d '{"changes":{"defaultIndex":"runner_status_idx"}}'

        echo -e "\n--\n+> Import Kibana objects"

        sleep infinity

  # kafkacat:
  #   image: edenhill/kafkacat:1.5.0
  #   container_name: kafkacat
  #   # depends_on:
  #   #   - kafka
  #   command: 
  #     - bash 
  #     - -c 
  #     - |
  #       echo '{"batt":100,"lon":-1.8029050435887677,"acc":30,"p":98.641334533691406,"bs":1,"vel":0,"vac":12,"lat":53.925261804884229,"t":"t","conn":"w","tst":1569319041,"alt":97,"_type":"location","tid":"FF"}' | \
  #         kafkacat -b ${CCLOUD_BROKER_HOST} 
  #                 -X security.protocol=SASL_SSL -X sasl.mechanisms=PLAIN \
  #                 -X sasl.username="${CCLOUD_API_KEY}" -X sasl.password="${CCLOUD_API_SECRET}" \
  #                 -X ssl.ca.location=/usr/local/etc/openssl/cert.pem -X api.version.request=true
  #                 -P -t data_mqtt